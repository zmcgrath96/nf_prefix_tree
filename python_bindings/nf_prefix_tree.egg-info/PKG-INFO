Metadata-Version: 2.1
Name: nf-prefix-tree
Version: 0.1.0
Summary: A datastructure for efficient storage of string data
Home-page: https://github.com/zmcgrath96/nf_prefix_tree
Author: Zachary McGrath
Author-email: zmcgrath96@gmail.com
License: MIT License

Copyright (c) [year] [fullname]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
Description: # No Frills Prefix Tree (nf_prefix_tree)
        This is a prefix tree with no frills. Supports simple insert, search, and basic querying of strings that a (can be) keyed. Written in C++ 11 and has python wrappers. Written because I couldn't find a fast, easy to install and use basic prefix tree in python. 
        
        ## Usage
        ### C++ 
        ```c++
        #include "PrefixTree.hpp"
        
        int main() {
        
            PrefixTree * t = new PrefixTree();
        
            t->addSequence("ABCDEFG", "Key1");
            t->addSequence("ABCDEFG", "Key2");
            t->addSequence("ABCXYZ", "Key3");
            t->addSequence("LMNOP", "Key4");
        
            t->show();
            
            t->show(2);
        }
        ```
        Output:
        ```bash
        root
        |-> Sequence: A	 keys: Key1, Key2, Key3, 
         |-> Sequence: AB	 keys: Key1, Key2, Key3, 
          |-> Sequence: ABC	 keys: Key1, Key2, Key3, 
           |-> Sequence: ABCD	 keys: Key1, Key2, 
            |-> Sequence: ABCDE	 keys: Key1, Key2, 
             |-> Sequence: ABCDEF	 keys: Key1, Key2, 
              |-> Sequence: ABCDEFG	 keys: Key1, Key2, 
           |-> Sequence: ABCX	 keys: Key3, 
            |-> Sequence: ABCXY	 keys: Key3, 
             |-> Sequence: ABCXYZ	 keys: Key3, 
        |-> Sequence: L	 keys: Key4, 
         |-> Sequence: LM	 keys: Key4, 
          |-> Sequence: LMN	 keys: Key4, 
           |-> Sequence: LMNO	 keys: Key4, 
            |-> Sequence: LMNOP	 keys: Key4, 
        root
        |-> Sequence: A	 keys: Key1, Key2, Key3, 
         |-> Sequence: AB	 keys: Key1, Key2, Key3, 
        |-> Sequence: L	 keys: Key4, 
         |-> Sequence: LM	 keys: Key4, 
        ```
        
        ### Python 
        ```python
        
        ```
Keywords: prefix bioinformatics substring string fast memory
Platform: UNKNOWN
Description-Content-Type: text/markdown
